#!/usr/bin/env python

import os
import shutil
import subprocess
import sys

ffmpeg_version = "4.2.2"
ffmpeg_package = "3"

destination_dir = sys.argv[1]
tarball_dir = "tarballs"

# determine tarball version
if sys.platform == "linux":
    tarball_name = "ffmpeg-%s-manylinux_%s.tar.bz2" % (
        ffmpeg_version,
        os.uname().machine,
    )
elif sys.platform == "darwin":
    tarball_name = "ffmpeg-%s-macosx_%s.tar.bz2" % (ffmpeg_version, os.uname().machine)
else:
    tarball_name = "ffmpeg-%s-win%s.tar.bz2" % (
        ffmpeg_version,
        os.environ["PYTHON_ARCH"],
    )

    # work around buggy 'tar' executable on Windows
    os.environ["PATH"] = "C:\\Program Files\\Git\\usr\\bin;" + os.environ["PATH"]

tarball_file = os.path.join(tarball_dir, tarball_name)
tarball_url = "https://github.com/jlaine/pyav-ffmpeg/releases/download/%s-%s/%s" % (
    ffmpeg_version,
    ffmpeg_package,
    tarball_name,
)

# download tarball
if not os.path.exists(tarball_file):
    print("Downloading %s" % tarball_url)
    if not os.path.exists(tarball_dir):
        os.mkdir(tarball_dir)
    subprocess.check_call(
        ["curl", "--location", "--output", tarball_file, "--silent", tarball_url]
    )

# extract tarball
print("Extracting to %s" % destination_dir)
if os.path.exists(destination_dir):
    shutil.rmtree(destination_dir)
os.mkdir(destination_dir)
subprocess.check_call(["tar", "-C", destination_dir, "-xf", tarball_file])
